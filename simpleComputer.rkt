;Instruction Register
(define make-InstructionRegister
  (lambda ()
    (let ((ir 0))
      (lambda (msg val)
        (case msg
          ((read)
           ir)
          ((write)
           (set! ir val))
          ((getOpcode)
           (quotient ir 100))
          ((getOperand)
           (remainder ir 100))
          )))))
;(define IR (make-InstructionRegister))
;(IR 'read 0)

;Accumulator
(define make-Accumulator
  (lambda ()
    (let ((acc 0))
      (lambda (msg val)
        (case msg
          ((read)
           acc)
          ((write)
           (set! acc val)))))))
;(define ACC (make-Accumulator))
;(ACC 'read 0)

;ProgramCounter
(define make-ProgramCounter
  (lambda ()
    (let ((pc 0))
      (lambda (msg val)
        (case msg
          ((read)
           pc)
          ((write)
           (set! pc val))
          ((increment)
           (set! pc (+ pc 1))))))))
;(define PC (make-ProgramCounter))
;(PC 'read 0)
;(PC 'increment 0)
;(PC 'read 0)

;MemoryAddressRegister
(define make-MemoryAddressRegister
  (lambda ()
    (let ((mar 0))
      (lambda (msg val)
        (case msg
          ((read)
           mar)
          ((write)
           (set! mar val)))))))
;(define MAR (make-MemoryAddressRegister))
;(MAR 'read 0)

;MemoryDataRegister
(define make-MemoryDataRegister
  (lambda ()
    (let ((mdr 0))
      (lambda (msg val)
        (case msg
          ((read)
           mdr)
          ((write)
           (set! mdr val)))))))
;(define MDR (make-MemoryDataRegister))
;(MDR 'read 0)

;InputDevice
(define make-InputDevice
  (lambda ()
    (let ((input 0))
      (lambda (msg)
        (case msg
          ((read)
           input)
          ((input)
           (write "Input: ")
           (set! input (read))))))))
;(define InDev (make-InputDevice))
;(InDev 'input)

;OutputDevice
(define make-OutputDevice
  (lambda ()
    (lambda (output)
      (write output))))
;(define OutDev make-OutputDevice)
;(OutDev '99)

;Memory
(define make-Memory
  (lambda (numOfElements)
    (let ((memVector (make-vector numOfElements)))
          (lambda (msg loc val)
            (case msg
              ((read)
               (vector-ref memVector loc))
              ((write)
               (vector-set! memVector loc val))
              ((getLength)
               (vector-length memVector)))))))
;(define memory (make-memory 100))
;(memory 'read 0 0)
;(memory 'write 0 17)
;(memory 'read 0 0)

;CPU
(define make-CPU
  (lambda ()
    (let ((simpleIR (make-InstructionRegister))
          (simplePC (make-ProgramCounter))
          (simpleACC (make-Accumulator))
          (simpleMAR (make-MemoryAddressRegister))
          (simpleMDR (make-MemoryDataRegister))
          (storeFlag #f)
          (inFlag #f)
          (outFlag #f))
      (lambda (msg val)
        (case msg
          ((preFetch)
           (simpleMAR 'write (simplePC 'read 0)))
          ((fetch)
           (simpleIR 'write (simpleMDR 'read 0))
           (simplePC 'increment 0))
          ((decode)
           (if (= (simpleIR 'getOpcode 0) 2)
               (begin
                 (set! storeFlag #t)
                 (simpleMDR 'write (simpleACC 'read 0)))
               (if (= (simpleIR 'getOpcode 0) 7)
                   (set! inFlag #t)
                   (if (= (simpleIR 'getOpcode 0) 8)
                       (set! outFlag #t)
                       )))
           (if (< (simpleIR 'getOpcode 0) 9)
               (simpleMAR 'write (simpleIR 'getOperand 0)))
           (simpleMAR 'write (simpleIR 'getOperand 0)))
          ((execute)
           (case (simpleIR 'getOpcode 0)
             ((1)
              (simpleACC 'write (simpleMDR 'read 0)))
             ;((2))
             ((3)
              (simpleACC 'write (+ (simpleACC 'read 0) (simpleMDR 'read 0))))
             ((4)
              (simpleACC 'write (- (simpleACC 'read 0) (simpleMDR 'read 0))))
             ((5)
              (simpleACC 'write (* (simpleACC 'read 0) (simpleMDR 'read 0))))
             ((6)
              (simpleACC 'write (/ (simpleACC 'read 0) (simpleMDR 'read 0))))
             ;((7))
             ((8)
              (simpleMAR 'write (simpleIR 'getOperand 0)))
             ((9)
              (simplePC 'write (simpleMAR 'read 0)))
             ((10)
              (if (= (simpleACC 'read 0) 0)
                  (simplePC 'write (simpleMAR 'read 0))))
             ((11)
              (if (> (simpleACC 'read 0) 0)
                  (simplePC 'write (simpleMAR 'read 0))))))
          ((notStop)
           (not (= (simpleIR 'read 0) 0))) ;will return #t while we continue loop
          ((getStore)
           storeFlag)
          ((getIn)
           inFlag)
          ((getOut)
           outFlag)
          ((setStore)
           (set! storeFlag #f))
          ((setIn)
           (set! inFlag #f))
          ((setOut)
           (set! outFlag #f))
          ((getMDR)
           (simpleMDR 'read 0))
          ((getMAR)
           (simpleMAR 'read 0))
          ((setMDR)
           (simpleMDR 'write val))
          ((SetIR)
           (simpleIR 'write val))
          )))))
;(define simpleCPU (make-CPU))
;(simpleCPU 'preFetch 0)
;(simpleCPU 'fetch 0)
;(simpleCPU 'decode 0)

;Computer
(define make-Computer
  (lambda (numOfElem)
    (let ((simpleCPU (make-CPU))
          (simpleMemory (make-Memory numOfElem))
          (inputDevice (make-InputDevice))
          (outputDevice (make-OutputDevice)))
          (lambda (msg val)
            (case msg
              ((load)
               (do ((i 0 (+ i 1))
                    (file (open-input-file "Compiled.txt")))
                 ((< (- numOfElem 1) i) (begin
                                                 (outputDevice "File loaded")
                                                 (newline)
                                                 (close-input-port file)))
                 (begin
                   (simpleMemory 'write i (read file))
                   ;(outputDevice (simpleMemory 'read i 0)) (newline)
                   )))
              ((run)
               (begin
                 (simpleCPU 'preFetch 0)
                 (simpleComputer 'busRefresh 0)
                 (simpleCPU 'fetch 0)
                 (simpleCPU 'decode 0)
                 (simpleComputer 'busRefresh 0)
                 (simpleComputer 'runLoop 0)))
               ((runLoop)
                (if (eqv? #t (simpleCPU 'notStop 0))
                   (begin
                     (simpleCPU 'execute 0)
                     (simpleCPU 'preFetch 0)
                     (simpleComputer 'busRefresh 0)
                     (simpleCPU 'fetch 0)
                     (simpleCPU 'decode 0)
                     (simpleComputer 'busRefresh 0)
                     (simpleComputer 'runLoop 0)
                     )
                   (begin
                     (newline)
                     (outputDevice "Program Finished"))))
               
              ((busRefresh)
               (if (eqv? (simpleCPU 'getStore 0) #t)
                   (begin
                     (simpleMemory 'write (simpleCPU 'getMAR 0) (simpleCPU 'getMDR 0))
                     (simpleCPU 'setStore 0))
                   (if (eqv? (simpleCPU 'getIn 0) #t)
                       (begin
                         (inputDevice 'input)
                         (simpleMemory 'write (simpleCPU 'getMAR 0) (inputDevice 'read))
                         (simpleCPU 'setIn 0))
                       (if (eqv? (simpleCPU 'getOut 0) #t)
                           (begin
                             (outputDevice (simpleMemory 'read (simpleCPU 'getMAR 0) 0))
                             (simpleCPU 'setOut 0))
                           (simpleCPU 'setMDR (simpleMemory 'read (simpleCPU 'getMAR 0) 0))))))
              )))))
(define simpleComputer (make-Computer 100))
(simpleComputer 'load 0)
(simpleComputer 'run 0)